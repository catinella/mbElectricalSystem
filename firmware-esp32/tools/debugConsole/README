#-----------------------------------------------------------------------------------------------------------------------------------
     __  __       _             _     _ _          _____ _           _        _           _   ____            _                 
    |  \/  | ___ | |_ ___  _ __| |__ (_) | _____  | ____| | ___  ___| |_ _ __(_) ___ __ _| | / ___| _   _ ___| |_ ___ _ __ ___  
    | |\/| |/ _ \| __/ _ \| '__| '_ \| | |/ / _ \ |  _| | |/ _ \/ __| __| '__| |/ __/ _` | | \___ \| | | / __| __/ _ \ '_ ` _ \ 
    | |  | | (_) | || (_) | |  | |_) | |   <  __/ | |___| |  __/ (__| |_| |  | | (_| (_| | |  ___) | |_| \__ \ ||  __/ | | | | |
    |_|  |_|\___/ \__\___/|_|  |_.__/|_|_|\_\___| |_____|_|\___|\___|\__|_|  |_|\___\__,_|_| |____/ \__, |___/\__\___|_| |_| |_|
                                                                                                    |___/                       
#-----------------------------------------------------------------------------------------------------------------------------------
0. Files
	debugConsole.c         C library
	debugConsole.h         Header file
	debugConsole.pl        DebugConsole executable file
	debugConsole_test.pl

1. Description:
	The code belongs to this folder allows you to get a serial debug console where the PINs status will be displayed with the
	log-messages, in ordered and clean way

2. Dependences:
	The debugConsole executable file has been written in Perl-5. So, you need to install the following perl-libraries. It can be
	a very easy procedure if you use cpan tool: use "cpan install <perl library>"
		Term::Size
		Time::HiRes
		Term::ANSIScreen
		IO::Select
	The process also need the "stty" system-tool to configure the serial port. But this tool should be already installed by default

3. Testing procedure
	Because this console receives data from serial port, to test it you need a virtual serial port. In order to get it, you can
	use the following command:
		socat -d -d pty,raw,echo=0 pty,raw,echo=0

	This command will generate a serial ports couple in /dev/pts folder. The two ports are linked like the head and the tail of a
	queue, it means when you send data to a port you can read the data from the other one.
